大程序结构——多个源代码文件

多个.c 文件
·main() 里的代码太长了适合分成几个函数
·一个源代码文件太长了适合分成几个文件（函数太多）
·两个独立的源代码文件不能编译形成可执行的程序
如何组合成一个有效的程序？

项目
·新建一个项目，然后把几个源代码文件加进去
·对于项目，dev C++编译器会把一个项目中所有的源代码文件都编译后，链接起来
·VS 需要新建项目
·有的IDE 有分开的编译和构建两个按钮，前者是对单个源代码文件进行编译，
    后者是对整个项目做链接

编译单元
·一个.c 文件是一个编译单元
·编译器每次编译只能处理一个编译单元

需要一个媒介保证在main时对max的使用和在max的定义一致

头文件
·把函数原型放到一个头文件（.h）中，在需要调用这个函数的源代码文件（.c）中的#include 这个头文件，
    就可以让编译器知道函数的原型
·在使用和定义这个函数的地方都应该#include 这个头文件
·一般的做法就是任何.c 都有对应的同名的.h,把所有对外公开的函数原型和全局变量声明都放进去

#include
·#include 是一个编译预处理指令，和宏一样，在编译之前就处理了
·它把那个文件的全部文本内容原封不动地插入到它所在的地方
·所以也不是一定要在.c 文件的最前面#include 

"" 还是<>
·#include有两种形式来指出要插入的文件
    ·"" 要求编译器首先在当前目录（.c 文件所在的目录）寻找这个文件，
        如果没有就到编译器指定的目录中找
   ·<> 让编译器只在指定的目录中去找
·编译器自己知道自己的标准库的头文件在哪里
·环境变量和编译器的命令行参数也可以指定寻找头文件的目录

#include 的误区
·#include 不是来引入库的
·stdio.h 里只有 printf 的原型，printf 的代码在另外的地方，某个.lib (Windows)或.a (Unix) 中
·现在的C 语言编译器默认会引入所有的标准库
·#include <stdio.h> 只是为了让编译器知道printf 函数的原型，保证你调用时给出的参数值是正确的类型
·如果没有得到原型，编译器会猜原型（比如不引入stdlib使用malloc编译成功进行）

不对外公开的函数
·在函数前面加上static 就使得它成为只能在所在的编译单元中被使用的函数
·在全局变量前面加上static 就使得它成为只能在所在的编译单元（.c ）中被使用的全局变量
