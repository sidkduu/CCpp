C 语言是接近底层的语言
·C 语言的程序在编译完后可以直接在机器上运行
·C 语言提供了一些较为底层的操作

按位运算（bitwise operation）
·C 语言有这样的运算符
	·&		按位的与
	·|		按位的或
	·~		按位取反
	·^		按位异或
	·<<		左移 			（*2或在右边补0）
	·>>		右移				（/2或抹去最后一位）

按位与&
·如果(x)i == 1 并且(y)i ==1, 那么(x  & y)i = 1
·否则的话(x  & y)i = 0
·按位与常用于两种应用：
	·让某一位或某些位为0：x  &  0xFE		(使得另一个数最低位变成0)
	·取一个数中的一段：x  &  0xFF		

按位或|
·如果(x)i == 1 或(y)i ==1, 那么(x | y)i = 1		
·否则的话(x | y)i = 0
·按位或常用于两种应用：
	·使得一位或几个位为1： x | 0x01		(使得另一个数最低位变成1)
	·把两个数拼起来： 0x00FF | 0xFF00

按位取反~
·(~x)i = 1 - (x)i
·把1 位变成0，0 位变成1
·想得到的全部位为1 的数：~0
·7 的二进制是0111，x | 7 使得低3 位为1 ，而
·x  &  ~7， 就使得低3 位为0

按位异或^
·如果(x)i == (y)i , 那么(x ^ y)i = 1	
·否则的话(x ^ y)i == 1
·如果两个位相等，那么结果为0；不相等，结果为1
·如果x 和y 相等， 那么x ^ y 的结果为0
·对一个变量用同一个值异或两次，等于什么也没做 （可以拿来做弱加密）
·x^y^y = x

逻辑运算vs 按位运算
·对于逻辑运算，它只看到两个值：0 和1
·可以认为逻辑运算相当于把所有非0 值都变成1，然后做按位运算
·5 & 4  =  4  而  5 && 4  ==  1 && 1 = 1
·5|4  =  5  而  5  ||  4  ==  1  ||  1 = 1
·~4  =  3  而  ！4  ==  ！1  =  0